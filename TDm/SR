{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "RecSysTD.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN2xSlCrg0DVCL0L+NFXveQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/thad75/TP-ENSEA-ELEVE/blob/main/TDm/SR\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "puWxHBgcYLyM",
        "outputId": "6f6f89c0-60c7-4434-9498-b06c3e0d1d70",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2023-03-28 10:07:02--  https://files.grouplens.org/datasets/movielens/ml-20m.zip\n",
            "Resolving files.grouplens.org (files.grouplens.org)... 128.101.65.152\n",
            "Connecting to files.grouplens.org (files.grouplens.org)|128.101.65.152|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 198702078 (189M) [application/zip]\n",
            "Saving to: ‘ml-20m.zip.1’\n",
            "\n",
            "ml-20m.zip.1        100%[===================>] 189.50M  70.6MB/s    in 2.7s    \n",
            "\n",
            "2023-03-28 10:07:05 (70.6 MB/s) - ‘ml-20m.zip.1’ saved [198702078/198702078]\n",
            "\n",
            "Archive:  /content/ml-20m.zip\n",
            "replace ml-20m/genome-scores.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename: A\n",
            "  inflating: ml-20m/genome-scores.csv  \n",
            "  inflating: ml-20m/genome-tags.csv  \n",
            "  inflating: ml-20m/links.csv        \n",
            "  inflating: ml-20m/movies.csv       \n",
            "  inflating: ml-20m/ratings.csv      \n",
            "  inflating: ml-20m/README.txt       \n",
            "  inflating: ml-20m/tags.csv         \n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: gdown in /usr/local/lib/python3.9/dist-packages (4.6.4)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.9/dist-packages (from gdown) (1.16.0)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.9/dist-packages (from gdown) (4.11.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.9/dist-packages (from gdown) (3.10.2)\n",
            "Requirement already satisfied: requests[socks] in /usr/local/lib/python3.9/dist-packages (from gdown) (2.27.1)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from gdown) (4.65.0)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.9/dist-packages (from beautifulsoup4->gdown) (2.4)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests[socks]->gdown) (1.26.15)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests[socks]->gdown) (3.4)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests[socks]->gdown) (2.0.12)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests[socks]->gdown) (2022.12.7)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.9/dist-packages (from requests[socks]->gdown) (1.7.1)\n",
            "/usr/local/lib/python3.9/dist-packages/gdown/cli.py:121: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n",
            "  warnings.warn(\n",
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1b9XN-AD2ph6Akdy4gpWdx8rIlK6HZ-u9\n",
            "To: /content/ratings_Beauty.csv\n",
            "100% 82.4M/82.4M [00:00<00:00, 157MB/s]\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pytorch-lightning in /usr/local/lib/python3.9/dist-packages (2.0.0)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (1.13.1+cu116)\n",
            "Requirement already satisfied: torchmetrics>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (0.11.4)\n",
            "Requirement already satisfied: lightning-utilities>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (0.8.0)\n",
            "Requirement already satisfied: numpy>=1.17.2 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (1.22.4)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (4.5.0)\n",
            "Requirement already satisfied: fsspec[http]>2021.06.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (2023.3.0)\n",
            "Requirement already satisfied: tqdm>=4.57.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (4.65.0)\n",
            "Requirement already satisfied: PyYAML>=5.4 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (6.0)\n",
            "Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (23.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (2.27.1)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.9/dist-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (3.8.4)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.8.2)\n",
            "Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (2.0.12)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.1)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (4.0.2)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (6.0.4)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (22.2.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (2022.12.7)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (3.4)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (1.26.15)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pytorch-lightning in /usr/local/lib/python3.9/dist-packages (2.0.0)\n",
            "Requirement already satisfied: lightning-utilities>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (0.8.0)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (4.5.0)\n",
            "Requirement already satisfied: tqdm>=4.57.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (4.65.0)\n",
            "Requirement already satisfied: torchmetrics>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (0.11.4)\n",
            "Requirement already satisfied: numpy>=1.17.2 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (1.22.4)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (1.13.1+cu116)\n",
            "Requirement already satisfied: PyYAML>=5.4 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (6.0)\n",
            "Requirement already satisfied: fsspec[http]>2021.06.0 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (2023.3.0)\n",
            "Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.9/dist-packages (from pytorch-lightning) (23.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.9/dist-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (2.27.1)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.9/dist-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (3.8.4)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.1)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.3)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (6.0.4)\n",
            "Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (2.0.12)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (4.0.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (22.2.0)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.9/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.8.2)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (2022.12.7)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (3.4)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (1.26.15)\n"
          ]
        }
      ],
      "source": [
        "!wget https://files.grouplens.org/datasets/movielens/ml-20m.zip\n",
        "!unzip \"/content/ml-20m.zip\"\n",
        "!pip install gdown\n",
        "!gdown --id 1b9XN-AD2ph6Akdy4gpWdx8rIlK6HZ-u9\n",
        "!pip install pytorch-lightning\n",
        "!pip install pytorch-lightning\n",
        "import os\n",
        "import random\n",
        "import shutil\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import pycocotools\n",
        "import pytorch_lightning as pl\n",
        "import scipy.sparse as sparse\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torchvision.datasets as dset\n",
        "import torchvision.transforms as transforms\n",
        "from IPython.display import clear_output, display\n",
        "from pytorch_lightning import loggers as pl_loggers\n",
        "from scipy.sparse import coo_matrix\n",
        "from scipy.sparse.csgraph import laplacian\n",
        "from sklearn import preprocessing\n",
        "from sklearn.model_selection import train_test_split\n",
        "from torch import nn\n",
        "from torch.nn import Module\n",
        "from torch.nn import functional as F\n",
        "from torch.utils.data import DataLoader, Dataset, random_split\n",
        "from torchvision import transforms\n",
        "from torchvision.datasets import MNIST\n",
        "\n",
        "pd.set_option(\"expand_frame_repr\", False)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Disclaimer \n",
        "\n",
        "These are interviews questions from companies such as PMU, Amazon, Netflix. Try not to use ChatGPT as much as possible as ChatGPT is not, yet, allowed in interviews"
      ],
      "metadata": {
        "id": "MeUQGymaplI7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hands-On I : Recommending an artist\n",
        "\n",
        "Given the following data, we want to recommend a list of artists from our existing database to the listener. Using similarity computation, recommend in the decreasing order the artists that suits listerners' taste"
      ],
      "metadata": {
        "id": "z5mobf2WMiey"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = {\n",
        "    'Artist': ['Celine Dion', 'Fred Again', 'Elton John', 'Black Eyed Peas', 'BTS', 'Anirudh', 'A.R Rahman', 'User'],\n",
        "    'International': [1, 1, 1, 1, 1, 1, 1, 1],\n",
        "    'Sings in French': [1, 0, 0, 0, 0, 0, 0, 0],\n",
        "    'Versatility': [0, 0, 0, 0, 0, 1, 1, 1],\n",
        "    'Danceability': [0, 1, 0, 1, 1, 1, 1, 0],\n",
        "    'Makes Film Music (BGM)': [0, 0, 1, 0, 0, 1, 1, 1],\n",
        "    'Won Awards': [1, 1, 1, 1, 1, 1, 1, 1],\n",
        "    'Recent Hit': [0, 1, 0, 0, 1, 1, 1, 0]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "df = df.set_index('Artist')\n",
        "\n",
        "# TODO : Print the datafmale\n",
        "print(df)"
      ],
      "metadata": {
        "id": "Is2l__NFM6bb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics.pairwise import manhattan_distances\n",
        "\n",
        "# TODO : Extract users' likings (check loc method from df)\n",
        "user= df.loc[['User']]\n",
        "other_line = df.loc[['Celine Dion']]\n",
        "keys = [key for key in df.index if 'User' not in key]\n",
        "\n",
        "# TODO : Define a Similarity Function (Cosine or Distance will be enough)\n",
        "def similarity_function(l1, l2):\n",
        "  return manhattan_distances(l1,l2)\n",
        "# TODO : Compare each artists to the user's taste and print the list of recommendable artist.\n",
        "values = []\n",
        "\n",
        "for key in keys: \n",
        "  value = similarity_function(user, df.loc[[key]])\n",
        "  values.append((key, value))\n",
        "distance_df = pd.DataFrame(values, columns=[\"key\", \"similarity\"])\n",
        "distance_df.set_index('key')\n",
        "print(distance_df)"
      ],
      "metadata": {
        "id": "s8WfvAvmNLp7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hands-On II : Matrix Factorization\n",
        "\n",
        "We will be using an Industrial Dataset: Amazon Luxury. The data are loaded into a Pandas Dataframe. Let's analyze and understand the dataset.\n",
        "\n",
        "\n",
        "* What are the Dataframes keys ?\n",
        "* How many items are there ? How many users are there ?\n",
        "* How many unique items are there ? How many unique users are there ?\n",
        "* What's the span of the ratings ?\n",
        "* Plot the number of Ratings that are present. Is it a Gaussian Distribution ? A Skewed Gaussian Distribution ? \n",
        "* What could it mean on the quality of the products ? "
      ],
      "metadata": {
        "id": "gMUa1ZCBn41I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO : Load /content/ratings_Beauty.csv into a dataframe\n",
        "\n",
        "df = pd.read_csv(\"/content/ratings_Beauty.csv\")\n",
        "\n"
      ],
      "metadata": {
        "id": "D6C7FdWmn9Gq"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO : Perform the asked Data Exploration using pandas\n",
        "\n",
        "num_items = len(df['ProductId'].unique())\n",
        "num_users = len(df['UserId'].unique())\n",
        "rating_span = df['Rating'].max() - df['Rating'].min()\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.hist(df['Rating'], bins=5)\n",
        "plt.xlabel('Rating')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Distribution of Ratings')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "z-hEks0kqvAy",
        "outputId": "8ebc85db-f07c-446e-bb19-8b9a411f615b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## I - Dataset\n",
        "\n",
        "For this lab, we will be using a famous dataset. We will use the Amazon Luxury Dataset. The data are loaded into a Pandas Dataframe. Let's analyze and understand the dataset.\n",
        "\n",
        "\n",
        "\n",
        "* What are the Dataframes keys ?\n",
        "* How many items are there ? How many users are there ?\n",
        "* What's the span of the ratings ?\n",
        "* Plot the number of Ratings that are present. Is it a Gaussian Distribution ? A Skewed Gaussian Distribution ? \n",
        "* What could it mean on the quality of the products ? \n"
      ],
      "metadata": {
        "id": "yGNMtZIHn4Ho"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Applying it on a real Dataset\n",
        "\n",
        "\n",
        "* Using pivot methods, transform your dataframe to a Rating Matrix. If your session crashes, pass this question. You'll create other Rating Matrix later."
      ],
      "metadata": {
        "id": "yGw52VdkoeXP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# We are limiting the dataset to the first 100 lines due to the limitation in Google Colab\n",
        "\n",
        "df_mf = df.head(10000)\n",
        "rating_matrix = df_mf.pivot(index='UserId', columns='ProductId', values='Rating')\n",
        "rating_matrix"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "BmxA2pnHq88Z",
        "outputId": "7a46bff7-bb7c-4a77-f367-650cfb6b0ce2"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ProductId              0205616461  0558925278  0733001998  0737104473  0762451459  1304139212  1304139220  130414089X  130414643X  1304146537  ...  B000052YPE  B000052YPF  B000052YPG  B000052YPH  B000052YPM  B000052YPU  B000052YPV  B000052YPY  B000052YQ0  B000052YQ2\n",
              "UserId                                                                                                                                         ...                                                                                                                        \n",
              "A00205921JHJK5X9LNP42         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "A024581134CV80ZBLIZTZ         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "A03056581JJIOL5FSKJY7         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "A03099101ZRK4K607JVHH         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "A0505229A7NSH3FRXRR4          NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "...                           ...         ...         ...         ...         ...         ...         ...         ...         ...         ...  ...         ...         ...         ...         ...         ...         ...         ...         ...         ...         ...\n",
              "AZZHJZP4GQPPZ                 NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "AZZNK89PXD006                 NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "AZZOFVMQC0BJG                 NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "AZZQXL8VDCFTV                 NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "AZZTJQ7CQZUD8                 NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN  ...         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN\n",
              "\n",
              "[9697 rows x 886 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1e5409ae-8a7d-4f9f-a631-5b4f1327750d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>ProductId</th>\n",
              "      <th>0205616461</th>\n",
              "      <th>0558925278</th>\n",
              "      <th>0733001998</th>\n",
              "      <th>0737104473</th>\n",
              "      <th>0762451459</th>\n",
              "      <th>1304139212</th>\n",
              "      <th>1304139220</th>\n",
              "      <th>130414089X</th>\n",
              "      <th>130414643X</th>\n",
              "      <th>1304146537</th>\n",
              "      <th>...</th>\n",
              "      <th>B000052YPE</th>\n",
              "      <th>B000052YPF</th>\n",
              "      <th>B000052YPG</th>\n",
              "      <th>B000052YPH</th>\n",
              "      <th>B000052YPM</th>\n",
              "      <th>B000052YPU</th>\n",
              "      <th>B000052YPV</th>\n",
              "      <th>B000052YPY</th>\n",
              "      <th>B000052YQ0</th>\n",
              "      <th>B000052YQ2</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UserId</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>A00205921JHJK5X9LNP42</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A024581134CV80ZBLIZTZ</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A03056581JJIOL5FSKJY7</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A03099101ZRK4K607JVHH</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>A0505229A7NSH3FRXRR4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AZZHJZP4GQPPZ</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AZZNK89PXD006</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AZZOFVMQC0BJG</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AZZQXL8VDCFTV</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AZZTJQ7CQZUD8</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9697 rows × 886 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e5409ae-8a7d-4f9f-a631-5b4f1327750d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1e5409ae-8a7d-4f9f-a631-5b4f1327750d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1e5409ae-8a7d-4f9f-a631-5b4f1327750d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def correct_outliers(R):\n",
        "    return np.nan_to_num(R)\n",
        "\n",
        "rating_matrix = correct_outliers(rating_matrix)\n"
      ],
      "metadata": {
        "id": "WpMqN7muuPJi"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# II - Matrix Factorization\n"
      ],
      "metadata": {
        "id": "WYzv3TXP4fgQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## The Theory\n",
        "\n",
        "Matrix Factorization is an easy yet powerful recommendation algorithm. In fact, it is a simple embedding model. To remind you, an embedding is another representation of a vector, in a lower dimension space. The good thing about Matrix Factorization is its usability for either content based recommendation or collaborative filtering based recommendation. This is one of the earliest model used by Netflix. \n",
        "\n",
        "Matrix Factorization finds latent structure in data such as it decomposes a Feedback Matrix $A\\in \\mathbb{R}^{M*N}$ with M the number of users and n the number of items, into :     \n",
        "* $P$ :  a user embedding matrix $\\in \\mathbb{R}^{M*K}$\n",
        "* $Q$ : an item embedding matrix $\\in \\mathbb{R}^{N*K}$\n",
        "\n",
        "The embeddings are learned such that \n",
        "$ \\hat{A} = P*Q^{T} \\approx A$\n",
        "\n",
        "We define the Objective Function as \n",
        "\n",
        "$ \\underset{P \\in \\mathbb{R}^{M*K},  Q\\in \\mathbb{R}^{N*K}} min \\underset{i,j\\in{obs}}\\sum(A_{ij} - \\hat{A{ij}})^{2} $ over $P$ and  $Q$\n",
        "\n",
        "To update the values of the matrixes, we use the typical Gradient Descent. In fact, each element of P and Q are updated using the following equations :\n",
        "\n",
        "$p_{ik} = p_{ik} + 2\\alpha*error* q_{kj}$\n",
        "\n",
        "$q_{kj} = q_{kj} + 2\\alpha*error* p_{ik}$\n",
        "\n"
      ],
      "metadata": {
        "id": "tc1j53ZLoc_9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* Where do the $p_{ik}$ and $q_{kj}$ update formula come from ?"
      ],
      "metadata": {
        "id": "-mV3Fc3KWX0J"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now, we are going to code the Matrix Factorization Class that will perform matrix factorization for us.\n",
        "\n",
        "The class has 4 methods :\n",
        "* the init : for attribute initialization\n",
        "* the error : to compute the error\n",
        "* the update : to update the elements of P and Q \n",
        "* the run : to perform the calcultation for a num_step of times"
      ],
      "metadata": {
        "id": "-znBCm4QWs5H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Matrix_Factorization():\n",
        "  \"\"\"\n",
        "  This class performs Matrix Factorization for a given FeedBack Matrix\n",
        "\n",
        "\n",
        "  \"\"\"\n",
        "\n",
        "  def __init__(self,A, latent_dim, steps= 5000, learning_rate = 0.0002):\n",
        "\n",
        "      self.A = A\n",
        "      self.latent_dim = latent_dim\n",
        "      self.steps = steps\n",
        "      self.learning_rate = learning_rate\n",
        "\n",
        "      # TODO : Initialize the correct attributes\n",
        "      # M,N are the shape of the FeedBack Matrix\n",
        "      self.M, self.N  = ...\n",
        "\n",
        "      # TODO : Initialize two random matrix P and Q. Don't forget to Transpose Q\n",
        "      self.P = ...\n",
        "      self.Q = ...\n",
        "\n",
        "  def error(self, a, b):\n",
        "      # TODO : Return the error : the difference between a and b\n",
        "      return ...\n",
        "\n",
        "  def update(self):\n",
        "    # TODO : Perform element update using gradient descent\n",
        "    # TODO : Iterate among the user\n",
        "    for user in range(...):\n",
        "        # TODO : Iterate among the items\n",
        "        for item in range(...):\n",
        "          if self.A[user][item]> 0:\n",
        "            # TODO : Compute the error between the GT Rating and the Predicted Rating of user on item\n",
        "            error = ...\n",
        "            # TODO : Using the gradient descent formula update the values of the elements of P and Q\n",
        "            for latent in range(self.latent_dim):\n",
        "                self.P[user][latent] = ...\n",
        "                self.Q[latent][item] = ...\n",
        "\n",
        "  \n",
        "  def run(self):   \n",
        "    # TODO : Call the update method 'steps' times   \n",
        "    for step in range(self.steps) : \n",
        "        ...\n",
        "    return np.dot(self.P, self.Q)\n"
      ],
      "metadata": {
        "id": "ZJQZrovMq4Y1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Testing it on Collaborative Filtering\n",
        "\n",
        "We give you this R matrix. As you can see the R matrix contains some outliers (Nan values)\n",
        "* How can we handle the outliers in this R matrix, what changes should you do ?\n",
        "* Define a function that handles the outliers of your input matrix."
      ],
      "metadata": {
        "id": "nXfGbG-71nVC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Not TODO : Define a Rating Matrix. An example of Rating Matrix is given\n",
        "R = np.array([[np.NaN,5,1,0,4],\n",
        "              [0,0,1,0,3],\n",
        "              [0,5,0,2,np.NaN],\n",
        "              [1,np.NaN,0,5,1] ])\n",
        "\n",
        "# TODO : Define a function that handles the outliers of the R matrix. Hint nan_to_num \n",
        "def correct_outliers(R):\n",
        "    return ...\n",
        "\n",
        "# TODO : Verify that your function works\n",
        "R = ...\n"
      ],
      "metadata": {
        "id": "bsqeJlhp1lXP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO : Create an instance of the Matrix_Factorization Class\n",
        "latent_dim = ...\n",
        "MF = Matrix_Factorization(A = ...,\n",
        "                          latent_dim=...)"
      ],
      "metadata": {
        "id": "JZE5Inac3Fae"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO : Calculate the approximated Rating Matrix using the run method\n",
        "mat = ..."
      ],
      "metadata": {
        "id": "qP0MA4Dt5Hyh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Testing on the Luxury Dataset\n",
        "\n",
        "Now let's test our model on the Luxury Dataset. As you've seen, there's too much data for this Algorithm to handle. The computation time would be too much. We are going to restrict the dataset for the 50 first elements.\n",
        "In order to check the capacity of the algorithm. We masked few ratings to Nan values. The goal is to check if the model would be able to recapture the original rating."
      ],
      "metadata": {
        "id": "TFEsDZN4Ch_T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TODO : Keep the 50 first elements of the df dataframe\n",
        "mf_df = df.head(...)\n",
        "\n",
        "mf_df_train = mf_df.copy()"
      ],
      "metadata": {
        "id": "Rn84GbtzHKIq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Here we apply some Random Nan values\n",
        "random.seed(10)\n",
        "for i,value in enumerate(mf_df_train['Rating']):\n",
        "  if random.randint(0,5)==5:\n",
        "      mf_df_train['Rating'].loc[i] = np.NaN"
      ],
      "metadata": {
        "id": "mIUTeJhWE7AY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The mf_df_train dataframe corresponds to the mf_df dataset but with some nan values in the Rating column. \n",
        "* Create a Rating Matrix using 'UserId' as Index and 'ProductId' as Columns.\n",
        "* Initialize well the values of the Rating Matrix and convert it to numpy array.\n",
        "* Run Matrix Factorization on the given Matrix for a feature space of size 2"
      ],
      "metadata": {
        "id": "Fhqty0jDPN7a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mf_df_train\n",
        "\n",
        "# TODO : Using pivot method, create a Rating Matrix , with index : UserId and Columns : ProductId\n",
        "R = mf_df_train.pivot(index=..., columns=..., values=...)\n",
        "# TODO : Using a function defined previously, initialize the Nan values to 0\n",
        "R = ...\n",
        "# TODO : Run Matrix Factorization for a latent space of dimension 2 \n",
        "latent_dim = ...\n",
        "MF = Matrix_Factorization(R,latent_dim)\n",
        "R_pred = MF.run()"
      ],
      "metadata": {
        "id": "XfPpiYZiGCH0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now let's answer the following questions : \n",
        "* Will user 6 like item 9 ?\n",
        "* Will user 4 like item 2 ?\n",
        "* What do you think of this model ? (Is it fast ? Is it efficient ? Does it need lot of engineering ?)"
      ],
      "metadata": {
        "id": "YO76Gn7hQjY0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "As you can see, it is hard to find a real way to compute the metrics of the model. Here, we just looked if the model is able to find masked items."
      ],
      "metadata": {
        "id": "Z9DWmwOgGkzJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hands-On III : Recommendation Systems\n",
        "\n",
        "Using MovieLens Dataset, build a recommendation system. Feel free for your model. We suggest you to inspire yourself from the NCF Model. This mini lab is **voluntarily sparse**. As future engineers,you'll need to go fetch informations everywhere in order to create and train your model. Don't hesitate to ask questions ! A live correction will be given.\n",
        "\n",
        "Goal of this mini Lab :   \n",
        "*  **Be lost**\n",
        "* Discover new frameworks and read documentation\n",
        "* Explore Datas and think\n",
        "* Create and Train a model using Pytorch Lightning"
      ],
      "metadata": {
        "id": "cSsUwP-oYO6g"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## MovieLens Dataset\n",
        "\n",
        "As a Data Scientist, your work is to understand the data your working with. Using Panda Dataframe have a look at the ratings.csv and movies.csv files and answer the following questions.\n",
        "\n",
        "* What are the features of both csv files ?\n",
        "* To you, what could be the most important csv file ?\n",
        "* How many movies are there ?\n",
        "* How many users rated movies ? \n",
        "* How users did rate the movies ? \n",
        "* What's the span of the ratings ? Using matplotlib or seaborn, plot the ratings for a given movie.\n",
        "* Can we merge both tables ? if yes what key should be used to merge them ?\n",
        "* What are the differents genres of the movies ?\n",
        "* Are there outliers ?\n",
        "\n",
        "Documentation available on : https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html"
      ],
      "metadata": {
        "id": "k-HveM9ZYieW"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ZVIq4szvaj76"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Some Changes\n",
        "\n",
        "For the rest of the lab, we will only use .05% of the dataset as it it too much for this notebook ( RIP Google ). Run the following cell for the rating dataframe. It will replace the existing rating dataset by a splitted dataset corresponding to 0.05% of the dataset"
      ],
      "metadata": {
        "id": "8Hg8zt9ea1_u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ratings, _ = train_test_split(ratings, test_size = 0.95)"
      ],
      "metadata": {
        "id": "sVkJ5S1LbMLq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create your Dataset\n",
        "\n",
        "At this point, you should have a good understanding of the given model. \n",
        "The given Dataset is a csv file. As we work with Tensors and Pytorch, we need to convert the Dataset to something readable by a Pytorch Model. Define a Dataset class that inherits from Dataset that returns a dictionnary {user, item, ratings}. The skeleton is given.\n",
        "Don't forget to create your train, test, validation datasets.\n",
        "\n",
        "Documentation available on : https://pytorch.org/tutorials/beginner/basics/data_tutorial.html"
      ],
      "metadata": {
        "id": "nlIXMBoRbc1Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class MovieLensDataset(Dataset):\n",
        "\n",
        "  def __init__(self,dataframe):\n",
        "      self.dataframe = \n",
        "\n",
        "  def __getitem__(self, idx):\n",
        "\n",
        "\n",
        "      return {'user': torch.tensor(, dtype=torch.long),\n",
        "              'movie':  torch.tensor(, dtype=torch.long),\n",
        "              'rating':  torch.tensor(, dtype=torch.float)}\n",
        "\n",
        "  def __len__(self):\n",
        "    return len()\n"
      ],
      "metadata": {
        "id": "3YW4LI87cAdy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create your DataLoaders\n",
        "\n",
        "Now as in the labs, we want to fetch lot of data at the same time to send it to the model. We use DataLoaders. Define Dataloaders for each of your DataSets"
      ],
      "metadata": {
        "id": "4gi20sLNbfbt"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rYvkMJCwcsot"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create a Model\n",
        "\n",
        "Create a model that inherits from nn.Module. A skeleton is given. If you don't have any ideas, try to reimplement NCF model.\n",
        "\n",
        "Documenation available on : https://pytorch.org/tutorials/beginner/basics/buildmodel_tutorial.html"
      ],
      "metadata": {
        "id": "7P3EpMnMbiwZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class RecModel(nn.Module):\n",
        "\n",
        "\n",
        "    def __init__(self,..):\n",
        "\n",
        "\n",
        "    def forward(self, ..):"
      ],
      "metadata": {
        "id": "XkCM-u6KcrQi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train\n",
        "\n",
        "Form your training Loop and train your model. Don't forget your optimizer, batch size , number of epochs...\n",
        "\n",
        "Documentation with example on : https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html"
      ],
      "metadata": {
        "id": "UlOXFaW5bnyx"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "OH61ZalJcuXS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Test\n",
        "\n",
        "Test your model on the test set. \n",
        "Do we need a metric ? If yes use the RSME as a metric"
      ],
      "metadata": {
        "id": "X2ID6GmcbpR2"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QZgUaa7Ycu0A"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}